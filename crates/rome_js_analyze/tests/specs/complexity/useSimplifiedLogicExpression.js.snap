---
source: crates/rome_js_analyze/tests/spec_tests.rs
expression: useSimplifiedLogicExpression.js
---
# Input
```js
// valid 
const boolExpr3 = true;
const boolExpr4 = false;
const r5 = !(boolExpr1 && boolExpr2);
const boolExpr5 = true;
const boolExpr6 = false;
const r6 = !!boolExpr1 || !!boolExpr2;
!!x
// invalid

const boolExp = true;
const r = true && boolExp;
const boolExp2 = true;
const r2 = boolExp || true;
const nonNullExp = 123;
const r3 = null ?? nonNullExp;
const boolExpr1 = true;
const boolExpr2 = false;
const r4 = !boolExpr1 || !boolExpr2;
if (
    !boolExpr1 ||
    // comment1
    !boolExpr2
) {}
if (
    !boolExpr1 ||
    // comment1
    !boolExpr2
) {}
if (
    !boolExpr1
    // comment1
    ||
    // comment2
    !boolExpr2
) {}
let a = !b || !c
```

# Diagnostics
```
useSimplifiedLogicExpression.js:12:11 lint/complexity/useSimplifiedLogicExpression  FIXABLE  ━━━━━━━━━━

  ! Logical expression contains unnecessary complexity.
  
    11 │ const boolExp = true;
  > 12 │ const r = true && boolExp;
       │           ^^^^^^^^^^^^^^^
    13 │ const boolExp2 = true;
    14 │ const r2 = boolExp || true;
  
  i Suggested fix: Discard redundant terms from the logical expression.
  
    12 │ const·r·=·true·&&·boolExp;
       │           --------        

```

```
useSimplifiedLogicExpression.js:14:12 lint/complexity/useSimplifiedLogicExpression  FIXABLE  ━━━━━━━━━━

  ! Logical expression contains unnecessary complexity.
  
    12 │ const r = true && boolExp;
    13 │ const boolExp2 = true;
  > 14 │ const r2 = boolExp || true;
       │            ^^^^^^^^^^^^^^^
    15 │ const nonNullExp = 123;
    16 │ const r3 = null ?? nonNullExp;
  
  i Suggested fix: Discard redundant terms from the logical expression.
  
    14 │ const·r2·=·boolExp·||·true;
       │            -----------     

```

```
useSimplifiedLogicExpression.js:16:12 lint/complexity/useSimplifiedLogicExpression  FIXABLE  ━━━━━━━━━━

  ! Logical expression contains unnecessary complexity.
  
    14 │ const r2 = boolExp || true;
    15 │ const nonNullExp = 123;
  > 16 │ const r3 = null ?? nonNullExp;
       │            ^^^^^^^^^^^^^^^^^^
    17 │ const boolExpr1 = true;
    18 │ const boolExpr2 = false;
  
  i Suggested fix: Discard redundant terms from the logical expression.
  
    16 │ const·r3·=·null·??·nonNullExp;
       │            --------           

```

```
useSimplifiedLogicExpression.js:19:12 lint/complexity/useSimplifiedLogicExpression  FIXABLE  ━━━━━━━━━━

  ! Logical expression contains unnecessary complexity.
  
    17 │ const boolExpr1 = true;
    18 │ const boolExpr2 = false;
  > 19 │ const r4 = !boolExpr1 || !boolExpr2;
       │            ^^^^^^^^^^^^^^^^^^^^^^^^
    20 │ if (
    21 │     !boolExpr1 ||
  
  i Suggested fix: Reduce the complexity of the logical expression.
  
    17 17 │   const boolExpr1 = true;
    18 18 │   const boolExpr2 = false;
    19    │ - const·r4·=·!boolExpr1·||·!boolExpr2;
       19 │ + const·r4·=·!(boolExpr1·&&·boolExpr2);
    20 20 │   if (
    21 21 │       !boolExpr1 ||
  

```

```
useSimplifiedLogicExpression.js:21:5 lint/complexity/useSimplifiedLogicExpression  FIXABLE  ━━━━━━━━━━

  ! Logical expression contains unnecessary complexity.
  
    19 │ const r4 = !boolExpr1 || !boolExpr2;
    20 │ if (
  > 21 │     !boolExpr1 ||
       │     ^^^^^^^^^^^^^
  > 22 │     // comment1
  > 23 │     !boolExpr2
       │     ^^^^^^^^^^
    24 │ ) {}
    25 │ if (
  
  i Suggested fix: Reduce the complexity of the logical expression.
  
    19 19 │   const r4 = !boolExpr1 || !boolExpr2;
    20 20 │   if (
    21    │ - ····!boolExpr1·||
    22    │ - ····//·comment1
    23    │ - ····!boolExpr2
       21 │ + ····!(boolExpr1·&&
       22 │ + ····boolExpr2)
    24 23 │   ) {}
    25 24 │   if (
  

```

```
useSimplifiedLogicExpression.js:26:5 lint/complexity/useSimplifiedLogicExpression  FIXABLE  ━━━━━━━━━━

  ! Logical expression contains unnecessary complexity.
  
    24 │ ) {}
    25 │ if (
  > 26 │     !boolExpr1 ||
       │     ^^^^^^^^^^^^^
  > 27 │     // comment1
  > 28 │     !boolExpr2
       │     ^^^^^^^^^^
    29 │ ) {}
    30 │ if (
  
  i Suggested fix: Reduce the complexity of the logical expression.
  
    24 24 │   ) {}
    25 25 │   if (
    26    │ - ····!boolExpr1·||
    27    │ - ····//·comment1
    28    │ - ····!boolExpr2
       26 │ + ····!(boolExpr1·&&
       27 │ + ····boolExpr2)
    29 28 │   ) {}
    30 29 │   if (
  

```

```
useSimplifiedLogicExpression.js:31:5 lint/complexity/useSimplifiedLogicExpression  FIXABLE  ━━━━━━━━━━

  ! Logical expression contains unnecessary complexity.
  
    29 │ ) {}
    30 │ if (
  > 31 │     !boolExpr1
       │     ^^^^^^^^^^
  > 32 │     // comment1
  > 33 │     ||
  > 34 │     // comment2
  > 35 │     !boolExpr2
       │     ^^^^^^^^^^
    36 │ ) {}
    37 │ let a = !b || !c
  
  i Suggested fix: Reduce the complexity of the logical expression.
  
    29 29 │   ) {}
    30 30 │   if (
    31    │ - ····!boolExpr1
       31 │ + ····!(boolExpr1
    32 32 │       // comment1
    33    │ - ····||
    34    │ - ····//·comment2
    35    │ - ····!boolExpr2
       33 │ + ····&&
       34 │ + ····boolExpr2)
    36 35 │   ) {}
    37 36 │   let a = !b || !c
  

```

```
useSimplifiedLogicExpression.js:37:9 lint/complexity/useSimplifiedLogicExpression  FIXABLE  ━━━━━━━━━━

  ! Logical expression contains unnecessary complexity.
  
    35 │     !boolExpr2
    36 │ ) {}
  > 37 │ let a = !b || !c
       │         ^^^^^^^^
  
  i Suggested fix: Reduce the complexity of the logical expression.
  
    35 35 │       !boolExpr2
    36 36 │   ) {}
    37    │ - let·a·=·!b·||·!c
       37 │ + let·a·=·!(b·&&·c)
  

```


