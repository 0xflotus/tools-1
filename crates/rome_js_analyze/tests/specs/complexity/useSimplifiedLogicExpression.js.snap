---
source: crates/rome_js_analyze/tests/spec_tests.rs
expression: useSimplifiedLogicExpression.js
---
# Input
```js
// valid 
const boolExpr3 = true;
const boolExpr4 = false;
const r5 = !(boolExpr1 && boolExpr2);
const boolExpr5 = true;
const boolExpr6 = false;
const r6 = !!boolExpr1 || !!boolExpr2;
!!x
// invalid
const boolExp = true;
const r = true && boolExp;
const boolExp2 = true;
const r2 = boolExp || true;
const nonNullExp = 123;
const r3 = null ?? nonNullExp;
const boolExpr1 = true;
const boolExpr2 = false;
const r4 = !boolExpr1 || !boolExpr2;
if (
    !boolExpr1 ||
    // comment
    !boolExpr2
) {}
if (
    !boolExpr1 ||
    // comment
    !boolExpr2
) {}

```

# Diagnostics
```
useSimplifiedLogicExpression.js:11:11 lint/complexity/useSimplifiedLogicExpression  FIXABLE  ━━━━━━━━━━

  ! Logical expression contains unnecessary complexity.
  
     9 │ // invalid
    10 │ const boolExp = true;
  > 11 │ const r = true && boolExp;
       │           ^^^^^^^^^^^^^^^
    12 │ const boolExp2 = true;
    13 │ const r2 = boolExp || true;
  
  i Suggested fix: Discard redundant terms from the logical expression.
  
    11 │ const·r·=·true·&&·boolExp;
       │           --------        

```

```
useSimplifiedLogicExpression.js:13:12 lint/complexity/useSimplifiedLogicExpression  FIXABLE  ━━━━━━━━━━

  ! Logical expression contains unnecessary complexity.
  
    11 │ const r = true && boolExp;
    12 │ const boolExp2 = true;
  > 13 │ const r2 = boolExp || true;
       │            ^^^^^^^^^^^^^^^
    14 │ const nonNullExp = 123;
    15 │ const r3 = null ?? nonNullExp;
  
  i Suggested fix: Discard redundant terms from the logical expression.
  
    13 │ const·r2·=·boolExp·||·true;
       │            -----------     

```

```
useSimplifiedLogicExpression.js:15:12 lint/complexity/useSimplifiedLogicExpression  FIXABLE  ━━━━━━━━━━

  ! Logical expression contains unnecessary complexity.
  
    13 │ const r2 = boolExp || true;
    14 │ const nonNullExp = 123;
  > 15 │ const r3 = null ?? nonNullExp;
       │            ^^^^^^^^^^^^^^^^^^
    16 │ const boolExpr1 = true;
    17 │ const boolExpr2 = false;
  
  i Suggested fix: Discard redundant terms from the logical expression.
  
    15 │ const·r3·=·null·??·nonNullExp;
       │            --------           

```

```
useSimplifiedLogicExpression.js:18:12 lint/complexity/useSimplifiedLogicExpression  FIXABLE  ━━━━━━━━━━

  ! Logical expression contains unnecessary complexity.
  
    16 │ const boolExpr1 = true;
    17 │ const boolExpr2 = false;
  > 18 │ const r4 = !boolExpr1 || !boolExpr2;
       │            ^^^^^^^^^^^^^^^^^^^^^^^^
    19 │ if (
    20 │     !boolExpr1 ||
  
  i Suggested fix: Reduce the complexity of the logical expression.
  
    16 16 │   const boolExpr1 = true;
    17 17 │   const boolExpr2 = false;
    18    │ - const·r4·=·!boolExpr1·||·!boolExpr2;
       18 │ + const·r4·=·!(boolExpr1·&&boolExpr2);
    19 19 │   if (
    20 20 │       !boolExpr1 ||
  

```

```
useSimplifiedLogicExpression.js:20:5 lint/correctness/useSimplifiedLogicExpression  FIXABLE  ━━━━━━━━━━

  ! Logical expression contains unnecessary complexity.
  
    18 │ const r4 = !boolExpr1 || !boolExpr2;
    19 │ if (
  > 20 │     !boolExpr1 ||
       │     ^^^^^^^^^^^^^
  > 21 │     // comment
  > 22 │     !boolExpr2
       │     ^^^^^^^^^^
    23 │ ) {}
    24 │ if (
  
  i Suggested fix: Reduce the complexity of the logical expression.
  
    18 18 │   const r4 = !boolExpr1 || !boolExpr2;
    19 19 │   if (
    20    │ - ····!boolExpr1·||
       20 │ + ····!(boolExpr1·
    21 21 │       // comment
    22    │ - ····!boolExpr2
       22 │ + ····&&boolExpr2)
    23 23 │   ) {}
    24 24 │   if (
  

```

```
useSimplifiedLogicExpression.js:25:5 lint/correctness/useSimplifiedLogicExpression  FIXABLE  ━━━━━━━━━━

  ! Logical expression contains unnecessary complexity.
  
    23 │ ) {}
    24 │ if (
  > 25 │     !boolExpr1 ||
       │     ^^^^^^^^^^^^^
  > 26 │     // comment
  > 27 │     !boolExpr2
       │     ^^^^^^^^^^
    28 │ ) {}
    29 │ 
  
  i Suggested fix: Reduce the complexity of the logical expression.
  
    23 23 │   ) {}
    24 24 │   if (
    25    │ - ····!boolExpr1·||
       25 │ + ····!(boolExpr1·
    26 26 │       // comment
    27    │ - ····!boolExpr2
       27 │ + ····&&boolExpr2)
    28 28 │   ) {}
    29 29 │   
  

```


