---
source: crates/rome_formatter_test/src/snapshot_builder.rs
info:
  test_file: typescript/infer-extends/basic.ts
---

# Input

```ts
type X3<T> = T extends [infer U extends number] ? MustBeNumber<U> : never;
type X4<T> = T extends [infer U extends number, infer U extends number] ? MustBeNumber<U> : never;
type X5<T> = T extends [infer U extends number, infer U] ? MustBeNumber<U> : never;
type X6<T> = T extends [infer U, infer U extends number] ? MustBeNumber<U> : never;
type X7<T> = T extends [infer U extends string, infer U extends number] ? U : never;
type X8<U, T> = T extends infer U extends number ? U : T;
type X9<U, T> = T extends (infer U extends number ? U : T) ? U : T;

```


# Prettier differences

```diff
--- Prettier
+++ Rome
@@ -12,4 +12,5 @@
   ? U
   : never;
 type X8<U, T> = T extends infer U extends number ? U : T;
-type X9<U, T> = T extends (infer U extends number ? U : T) ? U : T;
+type X9<U, T> = T extends (infer U extends number ? U : T
+) ? U : T
```

# Output

```ts
type X3<T> = T extends [infer U extends number] ? MustBeNumber<U> : never;
type X4<T> = T extends [infer U extends number, infer U extends number]
  ? MustBeNumber<U>
  : never;
type X5<T> = T extends [infer U extends number, infer U]
  ? MustBeNumber<U>
  : never;
type X6<T> = T extends [infer U, infer U extends number]
  ? MustBeNumber<U>
  : never;
type X7<T> = T extends [infer U extends string, infer U extends number]
  ? U
  : never;
type X8<U, T> = T extends infer U extends number ? U : T;
type X9<U, T> = T extends (infer U extends number ? U : T
) ? U : T
```

# Errors
```
basic.ts:7:51 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × expected `)` but instead found `?`
  
    5 │ type X7<T> = T extends [infer U extends string, infer U extends number] ? U : never;
    6 │ type X8<U, T> = T extends infer U extends number ? U : T;
  > 7 │ type X9<U, T> = T extends (infer U extends number ? U : T) ? U : T;
      │                                                   ^
    8 │ 
  
  i Remove ?
  
basic.ts:7:58 parse ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

  × Expected a semicolon or an implicit semicolon after a statement, but found none
  
    5 │ type X7<T> = T extends [infer U extends string, infer U extends number] ? U : never;
    6 │ type X8<U, T> = T extends infer U extends number ? U : T;
  > 7 │ type X9<U, T> = T extends (infer U extends number ? U : T) ? U : T;
      │                                                          ^
    8 │ 
  
  i An explicit or implicit semicolon is expected here...
  
    5 │ type X7<T> = T extends [infer U extends string, infer U extends number] ? U : never;
    6 │ type X8<U, T> = T extends infer U extends number ? U : T;
  > 7 │ type X9<U, T> = T extends (infer U extends number ? U : T) ? U : T;
      │                                                          ^
    8 │ 
  
  i ...Which is required to end this statement
  
    5 │ type X7<T> = T extends [infer U extends string, infer U extends number] ? U : never;
    6 │ type X8<U, T> = T extends infer U extends number ? U : T;
  > 7 │ type X9<U, T> = T extends (infer U extends number ? U : T) ? U : T;
      │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    8 │ 
  

```


