Program {
  comments: Array []
  directives: Array []
  filename: 'input.js'
  hasHoistedVars: false
  interpreter: undefined
  mtime: undefined
  sourceType: 'script'
  syntax: Array []
  loc: Object {
    filename: 'input.js'
    end: Object {
      column: 17
      index: 17
      line: 1
    }
    start: Object {
      column: 0
      index: 0
      line: 1
    }
  }
  diagnostics: Array [
    Object {
      advice: Array []
      category: 'parse/js'
      filename: 'input.js'
      message: 'Unexpected token, expected ";"'
      mtime: undefined
      sourceType: 'script'
      origins: Array [Object {category: 'js-parser'}]
      end: Object {
        column: 9
        index: 9
        line: 1
      }
      start: Object {
        column: 8
        index: 8
        line: 1
      }
    }
  ]
  body: Array [
    ForStatement {
      loc: Object {
        filename: 'input.js'
        end: Object {
          column: 17
          index: 17
          line: 1
        }
        start: Object {
          column: 0
          index: 0
          line: 1
        }
      }
      body: EmptyStatement {
        loc: Object {
          filename: 'input.js'
          end: Object {
            column: 17
            index: 17
            line: 1
          }
          start: Object {
            column: 16
            index: 16
            line: 1
          }
        }
      }
      init: ReferenceIdentifier {
        name: 'let'
        loc: Object {
          filename: 'input.js'
          end: Object {
            column: 7
            index: 7
            line: 1
          }
          start: Object {
            column: 4
            index: 4
            line: 1
          }
        }
      }
      update: ReferenceIdentifier {
        name: 'INVALID_PLACEHOLDER'
        loc: Object {
          filename: 'input.js'
          end: Object {
            column: 15
            index: 15
            line: 1
          }
          start: Object {
            column: 14
            index: 14
            line: 1
          }
        }
      }
      test: AssignmentExpression {
        operator: '='
        loc: Object {
          filename: 'input.js'
          end: Object {
            column: 13
            index: 13
            line: 1
          }
          start: Object {
            column: 8
            index: 8
            line: 1
          }
        }
        left: AssignmentIdentifier {
          name: 'x'
          loc: Object {
            filename: 'input.js'
            end: Object {
              column: 9
              index: 9
              line: 1
            }
            start: Object {
              column: 8
              index: 8
              line: 1
            }
          }
        }
        right: NumericLiteral {
          value: 0
          loc: Object {
            filename: 'input.js'
            end: Object {
              column: 13
              index: 13
              line: 1
            }
            start: Object {
              column: 12
              index: 12
              line: 1
            }
          }
        }
      }
    }
  ]
}