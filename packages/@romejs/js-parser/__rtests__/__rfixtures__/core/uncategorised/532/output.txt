Program {
  comments: Array []
  directives: Array []
  filename: 'input.js'
  hasHoistedVars: false
  interpreter: undefined
  mtime: undefined
  sourceType: 'script'
  syntax: Array []
  loc: Object {
    filename: 'input.js'
    end: Object {
      column: 31
      index: 31
      line: 1
    }
    start: Object {
      column: 0
      index: 0
      line: 1
    }
  }
  diagnostics: Array [
    Object {
      advice: Array []
      category: 'parse/js'
      filename: 'input.js'
      message: 'Unexpected token, expected ";"'
      mtime: undefined
      sourceType: 'script'
      origins: Array [Object {category: 'js-parser'}]
      end: Object {
        column: 10
        index: 10
        line: 1
      }
      start: Object {
        column: 9
        index: 9
        line: 1
      }
    }
  ]
  body: Array [
    ForStatement {
      update: undefined
      loc: Object {
        filename: 'input.js'
        end: Object {
          column: 31
          index: 31
          line: 1
        }
        start: Object {
          column: 0
          index: 0
          line: 1
        }
      }
      init: ReferenceIdentifier {
        name: 'let'
        loc: Object {
          filename: 'input.js'
          end: Object {
            column: 8
            index: 8
            line: 1
          }
          start: Object {
            column: 5
            index: 5
            line: 1
          }
        }
      }
      test: BinaryExpression {
        operator: 'in'
        loc: Object {
          filename: 'input.js'
          end: Object {
            column: 18
            index: 18
            line: 1
          }
          start: Object {
            column: 9
            index: 9
            line: 1
          }
        }
        left: ReferenceIdentifier {
          name: 'x'
          loc: Object {
            filename: 'input.js'
            end: Object {
              column: 10
              index: 10
              line: 1
            }
            start: Object {
              column: 9
              index: 9
              line: 1
            }
          }
        }
        right: ReferenceIdentifier {
          name: 'list'
          loc: Object {
            filename: 'input.js'
            end: Object {
              column: 18
              index: 18
              line: 1
            }
            start: Object {
              column: 14
              index: 14
              line: 1
            }
          }
        }
      }
      body: ExpressionStatement {
        loc: Object {
          filename: 'input.js'
          end: Object {
            column: 31
            index: 31
            line: 1
          }
          start: Object {
            column: 20
            index: 20
            line: 1
          }
        }
        expression: CallExpression {
          loc: Object {
            filename: 'input.js'
            end: Object {
              column: 30
              index: 30
              line: 1
            }
            start: Object {
              column: 20
              index: 20
              line: 1
            }
          }
          callee: ReferenceIdentifier {
            name: 'process'
            loc: Object {
              filename: 'input.js'
              end: Object {
                column: 27
                index: 27
                line: 1
              }
              start: Object {
                column: 20
                index: 20
                line: 1
              }
            }
          }
          arguments: Array [
            ReferenceIdentifier {
              name: 'x'
              loc: Object {
                filename: 'input.js'
                end: Object {
                  column: 29
                  index: 29
                  line: 1
                }
                start: Object {
                  column: 28
                  index: 28
                  line: 1
                }
              }
            }
          ]
        }
      }
    }
  ]
}