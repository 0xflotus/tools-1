Program {
  comments: Array []
  directives: Array []
  filename: 'input.js'
  hasHoistedVars: false
  interpreter: undefined
  mtime: undefined
  sourceType: 'script'
  syntax: Array []
  loc: Object {
    filename: 'input.js'
    end: Object {
      column: 0
      index: 34
      line: 5
    }
    start: Object {
      column: 0
      index: 0
      line: 1
    }
  }
  diagnostics: Array [
    Object {
      advice: undefined
      category: 'parse/js'
      filename: 'input.js'
      message: 'Expected a semicolon or a line terminator'
      mtime: undefined
      sourceType: 'script'
      origins: Array [Object {category: 'js-parser'}]
      end: Object {
        column: 5
        index: 20
        line: 2
      }
      start: Object {
        column: 6
        index: 21
        line: 2
      }
    }
  ]
  body: Array [
    FunctionDeclaration {
      id: BindingIdentifier {
        name: 'x'
        loc: Object {
          filename: 'input.js'
          end: Object {
            column: 10
            index: 10
            line: 1
          }
          start: Object {
            column: 9
            index: 9
            line: 1
          }
        }
      }
      loc: Object {
        filename: 'input.js'
        end: Object {
          column: 1
          index: 33
          line: 4
        }
        start: Object {
          column: 0
          index: 0
          line: 1
        }
      }
      head: FunctionHead {
        async: false
        generator: false
        hasHoistedVars: false
        params: Array []
        predicate: undefined
        rest: undefined
        returnType: undefined
        thisType: undefined
        typeParameters: undefined
        loc: Object {
          filename: 'input.js'
          end: Object {
            column: 13
            index: 13
            line: 1
          }
          start: Object {
            column: 0
            index: 0
            line: 1
          }
        }
      }
      body: BlockStatement {
        directives: Array []
        loc: Object {
          filename: 'input.js'
          end: Object {
            column: 1
            index: 33
            line: 4
          }
          start: Object {
            column: 13
            index: 13
            line: 1
          }
        }
        body: Array [
          ExpressionStatement {
            loc: Object {
              filename: 'input.js'
              end: Object {
                column: 5
                index: 20
                line: 2
              }
              start: Object {
                column: 2
                index: 17
                line: 2
              }
            }
            expression: ReferenceIdentifier {
              name: 'let'
              loc: Object {
                filename: 'input.js'
                end: Object {
                  column: 5
                  index: 20
                  line: 2
                }
                start: Object {
                  column: 2
                  index: 17
                  line: 2
                }
              }
            }
          }
          ExpressionStatement {
            loc: Object {
              filename: 'input.js'
              end: Object {
                column: 8
                index: 31
                line: 3
              }
              start: Object {
                column: 6
                index: 21
                line: 2
              }
            }
            expression: BinaryExpression {
              operator: '/'
              loc: Object {
                filename: 'input.js'
                end: Object {
                  column: 8
                  index: 31
                  line: 3
                }
                start: Object {
                  column: 6
                  index: 21
                  line: 2
                }
              }
              right: ReferenceIdentifier {
                name: 'INVALID_PLACEHOLDER'
                loc: Object {
                  filename: 'input.js'
                  end: Object {
                    column: 8
                    index: 31
                    line: 3
                  }
                  start: Object {
                    column: 7
                    index: 30
                    line: 3
                  }
                }
              }
              left: BinaryExpression {
                operator: '/'
                loc: Object {
                  filename: 'input.js'
                  end: Object {
                    column: 6
                    index: 29
                    line: 3
                  }
                  start: Object {
                    column: 6
                    index: 21
                    line: 2
                  }
                }
                left: ReferenceIdentifier {
                  name: 'x'
                  loc: Object {
                    filename: 'input.js'
                    end: Object {
                      column: 7
                      index: 22
                      line: 2
                    }
                    start: Object {
                      column: 6
                      index: 21
                      line: 2
                    }
                  }
                }
                right: ReferenceIdentifier {
                  name: 'wow'
                  loc: Object {
                    filename: 'input.js'
                    end: Object {
                      column: 6
                      index: 29
                      line: 3
                    }
                    start: Object {
                      column: 3
                      index: 26
                      line: 3
                    }
                  }
                }
              }
            }
          }
        ]
      }
    }
  ]
}