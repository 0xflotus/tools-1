Program {
  comments: Array []
  directives: Array []
  filename: 'input.js'
  hasHoistedVars: false
  interpreter: undefined
  mtime: undefined
  sourceType: 'script'
  syntax: Array []
  loc: Object {
    filename: 'input.js'
    end: Object {
      column: 0
      index: 19
      line: 2
    }
    start: Object {
      column: 0
      index: 0
      line: 1
    }
  }
  diagnostics: Array [
    Object {
      advice: Array []
      category: 'parse/js'
      filename: 'input.js'
      message: 'Unexpected token, expected ";"'
      mtime: undefined
      sourceType: 'script'
      origins: Array [Object {category: 'js-parser'}]
      end: Object {
        column: 10
        index: 10
        line: 1
      }
      start: Object {
        column: 9
        index: 9
        line: 1
      }
    }
  ]
  body: Array [
    ForStatement {
      update: undefined
      loc: Object {
        filename: 'input.js'
        end: Object {
          column: 18
          index: 18
          line: 1
        }
        start: Object {
          column: 0
          index: 0
          line: 1
        }
      }
      body: EmptyStatement {
        loc: Object {
          filename: 'input.js'
          end: Object {
            column: 18
            index: 18
            line: 1
          }
          start: Object {
            column: 17
            index: 17
            line: 1
          }
        }
      }
      init: ReferenceIdentifier {
        name: 'let'
        loc: Object {
          filename: 'input.js'
          end: Object {
            column: 8
            index: 8
            line: 1
          }
          start: Object {
            column: 5
            index: 5
            line: 1
          }
        }
      }
      test: BinaryExpression {
        operator: 'in'
        loc: Object {
          filename: 'input.js'
          end: Object {
            column: 16
            index: 16
            line: 1
          }
          start: Object {
            column: 9
            index: 9
            line: 1
          }
        }
        left: ObjectExpression {
          properties: Array []
          loc: Object {
            filename: 'input.js'
            end: Object {
              column: 11
              index: 11
              line: 1
            }
            start: Object {
              column: 9
              index: 9
              line: 1
            }
          }
        }
        right: NumericLiteral {
          value: 0
          loc: Object {
            filename: 'input.js'
            end: Object {
              column: 16
              index: 16
              line: 1
            }
            start: Object {
              column: 15
              index: 15
              line: 1
            }
          }
        }
      }
    }
  ]
}