Program {
  comments: Array []
  directives: Array []
  filename: 'input.js'
  hasHoistedVars: false
  interpreter: undefined
  mtime: undefined
  sourceType: 'script'
  syntax: Array []
  loc: Object {
    filename: 'input.js'
    end: Object {
      column: 0
      index: 32
      line: 2
    }
    start: Object {
      column: 0
      index: 0
      line: 1
    }
  }
  diagnostics: Array [
    Object {
      advice: undefined
      category: 'parse/js'
      filename: 'input.js'
      message: 'Expected a semicolon or a line terminator'
      mtime: undefined
      sourceType: 'script'
      origins: Array [Object {category: 'js-parser'}]
      end: Object {
        column: 3
        index: 3
        line: 1
      }
      start: Object {
        column: 4
        index: 4
        line: 1
      }
    }
  ]
  body: Array [
    ExpressionStatement {
      loc: Object {
        filename: 'input.js'
        end: Object {
          column: 3
          index: 3
          line: 1
        }
        start: Object {
          column: 0
          index: 0
          line: 1
        }
      }
      expression: ReferenceIdentifier {
        name: 'let'
        loc: Object {
          filename: 'input.js'
          end: Object {
            column: 3
            index: 3
            line: 1
          }
          start: Object {
            column: 0
            index: 0
            line: 1
          }
        }
      }
    }
    BlockStatement {
      directives: Array []
      loc: Object {
        filename: 'input.js'
        end: Object {
          column: 29
          index: 29
          line: 1
        }
        start: Object {
          column: 4
          index: 4
          line: 1
        }
      }
      body: Array [
        ExpressionStatement {
          loc: Object {
            filename: 'input.js'
            end: Object {
              column: 12
              index: 12
              line: 1
            }
            start: Object {
              column: 5
              index: 5
              line: 1
            }
          }
          expression: SequenceExpression {
            loc: Object {
              filename: 'input.js'
              end: Object {
                column: 12
                index: 12
                line: 1
              }
              start: Object {
                column: 5
                index: 5
                line: 1
              }
            }
            expressions: Array [
              ReferenceIdentifier {
                name: 'a'
                loc: Object {
                  filename: 'input.js'
                  end: Object {
                    column: 6
                    index: 6
                    line: 1
                  }
                  start: Object {
                    column: 5
                    index: 5
                    line: 1
                  }
                }
              }
              AssignmentExpression {
                operator: '='
                loc: Object {
                  filename: 'input.js'
                  end: Object {
                    column: 10
                    index: 10
                    line: 1
                  }
                  start: Object {
                    column: 7
                    index: 7
                    line: 1
                  }
                }
                left: AssignmentIdentifier {
                  name: 'b'
                  loc: Object {
                    filename: 'input.js'
                    end: Object {
                      column: 8
                      index: 8
                      line: 1
                    }
                    start: Object {
                      column: 7
                      index: 7
                      line: 1
                    }
                  }
                }
                right: NumericLiteral {
                  value: 0
                  loc: Object {
                    filename: 'input.js'
                    end: Object {
                      column: 10
                      index: 10
                      line: 1
                    }
                    start: Object {
                      column: 9
                      index: 9
                      line: 1
                    }
                  }
                }
              }
              ReferenceIdentifier {
                name: 'c'
                loc: Object {
                  filename: 'input.js'
                  end: Object {
                    column: 12
                    index: 12
                    line: 1
                  }
                  start: Object {
                    column: 11
                    index: 11
                    line: 1
                  }
                }
              }
            ]
          }
        }
        ExpressionStatement {
          loc: Object {
            filename: 'input.js'
            end: Object {
              column: 13
              index: 13
              line: 1
            }
            start: Object {
              column: 12
              index: 12
              line: 1
            }
          }
          expression: ReferenceIdentifier {
            name: 'INVALID_PLACEHOLDER'
            loc: Object {
              filename: 'input.js'
              end: Object {
                column: 13
                index: 13
                line: 1
              }
              start: Object {
                column: 12
                index: 12
                line: 1
              }
            }
          }
        }
        ExpressionStatement {
          loc: Object {
            filename: 'input.js'
            end: Object {
              column: 16
              index: 16
              line: 1
            }
            start: Object {
              column: 13
              index: 13
              line: 1
            }
          }
          expression: SequenceExpression {
            loc: Object {
              filename: 'input.js'
              end: Object {
                column: 16
                index: 16
                line: 1
              }
              start: Object {
                column: 13
                index: 13
                line: 1
              }
            }
            expressions: Array [
              ReferenceIdentifier {
                name: 'd'
                loc: Object {
                  filename: 'input.js'
                  end: Object {
                    column: 14
                    index: 14
                    line: 1
                  }
                  start: Object {
                    column: 13
                    index: 13
                    line: 1
                  }
                }
              }
              ReferenceIdentifier {
                name: 'e'
                loc: Object {
                  filename: 'input.js'
                  end: Object {
                    column: 16
                    index: 16
                    line: 1
                  }
                  start: Object {
                    column: 15
                    index: 15
                    line: 1
                  }
                }
              }
            ]
          }
        }
        ExpressionStatement {
          loc: Object {
            filename: 'input.js'
            end: Object {
              column: 17
              index: 17
              line: 1
            }
            start: Object {
              column: 16
              index: 16
              line: 1
            }
          }
          expression: ReferenceIdentifier {
            name: 'INVALID_PLACEHOLDER'
            loc: Object {
              filename: 'input.js'
              end: Object {
                column: 17
                index: 17
                line: 1
              }
              start: Object {
                column: 16
                index: 16
                line: 1
              }
            }
          }
        }
        ExpressionStatement {
          loc: Object {
            filename: 'input.js'
            end: Object {
              column: 24
              index: 24
              line: 1
            }
            start: Object {
              column: 17
              index: 17
              line: 1
            }
          }
          expression: SequenceExpression {
            loc: Object {
              filename: 'input.js'
              end: Object {
                column: 24
                index: 24
                line: 1
              }
              start: Object {
                column: 17
                index: 17
                line: 1
              }
            }
            expressions: Array [
              AssignmentExpression {
                operator: '='
                loc: Object {
                  filename: 'input.js'
                  end: Object {
                    column: 20
                    index: 20
                    line: 1
                  }
                  start: Object {
                    column: 17
                    index: 17
                    line: 1
                  }
                }
                left: AssignmentIdentifier {
                  name: 'f'
                  loc: Object {
                    filename: 'input.js'
                    end: Object {
                      column: 18
                      index: 18
                      line: 1
                    }
                    start: Object {
                      column: 17
                      index: 17
                      line: 1
                    }
                  }
                }
                right: NumericLiteral {
                  value: 0
                  loc: Object {
                    filename: 'input.js'
                    end: Object {
                      column: 20
                      index: 20
                      line: 1
                    }
                    start: Object {
                      column: 19
                      index: 19
                      line: 1
                    }
                  }
                }
              }
              ArrayExpression {
                loc: Object {
                  filename: 'input.js'
                  end: Object {
                    column: 24
                    index: 24
                    line: 1
                  }
                  start: Object {
                    column: 21
                    index: 21
                    line: 1
                  }
                }
                elements: Array [
                  ReferenceIdentifier {
                    name: 'g'
                    loc: Object {
                      filename: 'input.js'
                      end: Object {
                        column: 23
                        index: 23
                        line: 1
                      }
                      start: Object {
                        column: 22
                        index: 22
                        line: 1
                      }
                    }
                  }
                ]
              }
            ]
          }
        }
        ExpressionStatement {
          loc: Object {
            filename: 'input.js'
            end: Object {
              column: 28
              index: 28
              line: 1
            }
            start: Object {
              column: 24
              index: 24
              line: 1
            }
          }
          expression: MemberExpression {
            loc: Object {
              filename: 'input.js'
              end: Object {
                column: 28
                index: 28
                line: 1
              }
              start: Object {
                column: 24
                index: 24
                line: 1
              }
            }
            object: ReferenceIdentifier {
              name: 'INVALID_PLACEHOLDER'
              loc: Object {
                filename: 'input.js'
                end: Object {
                  column: 25
                  index: 25
                  line: 1
                }
                start: Object {
                  column: 24
                  index: 24
                  line: 1
                }
              }
            }
            property: ComputedMemberProperty {
              value: ReferenceIdentifier {
                name: 'h'
                loc: Object {
                  filename: 'input.js'
                  end: Object {
                    column: 27
                    index: 27
                    line: 1
                  }
                  start: Object {
                    column: 26
                    index: 26
                    line: 1
                  }
                }
              }
              loc: Object {
                filename: 'input.js'
                end: Object {
                  column: 28
                  index: 28
                  line: 1
                }
                start: Object {
                  column: 25
                  index: 25
                  line: 1
                }
              }
            }
          }
        }
      ]
    }
    ExpressionStatement {
      loc: Object {
        filename: 'input.js'
        end: Object {
          column: 30
          index: 30
          line: 1
        }
        start: Object {
          column: 29
          index: 29
          line: 1
        }
      }
      expression: ReferenceIdentifier {
        name: 'INVALID_PLACEHOLDER'
        loc: Object {
          filename: 'input.js'
          end: Object {
            column: 30
            index: 30
            line: 1
          }
          start: Object {
            column: 29
            index: 29
            line: 1
          }
        }
      }
    }
    ExpressionStatement {
      loc: Object {
        filename: 'input.js'
        end: Object {
          column: 31
          index: 31
          line: 1
        }
        start: Object {
          column: 30
          index: 30
          line: 1
        }
      }
      expression: NumericLiteral {
        value: 0
        loc: Object {
          filename: 'input.js'
          end: Object {
            column: 31
            index: 31
            line: 1
          }
          start: Object {
            column: 30
            index: 30
            line: 1
          }
        }
      }
    }
  ]
}