Program {
  comments: Array []
  directives: Array []
  filename: 'input.js'
  hasHoistedVars: false
  interpreter: undefined
  mtime: undefined
  sourceType: 'script'
  syntax: Array []
  loc: Object {
    filename: 'input.js'
    end: Object {
      column: 47
      index: 47
      line: 1
    }
    start: Object {
      column: 0
      index: 0
      line: 1
    }
  }
  diagnostics: Array [
    Object {
      advice: undefined
      category: 'parse/js'
      filename: 'input.js'
      message: 'Expected a semicolon or a line terminator'
      mtime: undefined
      sourceType: 'script'
      origins: Array [Object {category: 'js-parser'}]
      end: Object {
        column: 30
        index: 30
        line: 1
      }
      start: Object {
        column: 31
        index: 31
        line: 1
      }
    }
  ]
  body: Array [
    SwitchStatement {
      loc: Object {
        filename: 'input.js'
        end: Object {
          column: 47
          index: 47
          line: 1
        }
        start: Object {
          column: 0
          index: 0
          line: 1
        }
      }
      discriminant: ReferenceIdentifier {
        name: 'answer'
        loc: Object {
          filename: 'input.js'
          end: Object {
            column: 14
            index: 14
            line: 1
          }
          start: Object {
            column: 8
            index: 8
            line: 1
          }
        }
      }
      cases: Array [
        SwitchCase {
          loc: Object {
            filename: 'input.js'
            end: Object {
              column: 45
              index: 45
              line: 1
            }
            start: Object {
              column: 25
              index: 25
              line: 1
            }
          }
          test: NumericLiteral {
            value: 42
            loc: Object {
              filename: 'input.js'
              end: Object {
                column: 25
                index: 25
                line: 1
              }
              start: Object {
                column: 23
                index: 23
                line: 1
              }
            }
          }
          consequent: Array [
            ExpressionStatement {
              loc: Object {
                filename: 'input.js'
                end: Object {
                  column: 30
                  index: 30
                  line: 1
                }
                start: Object {
                  column: 27
                  index: 27
                  line: 1
                }
              }
              expression: ReferenceIdentifier {
                name: 'let'
                loc: Object {
                  filename: 'input.js'
                  end: Object {
                    column: 30
                    index: 30
                    line: 1
                  }
                  start: Object {
                    column: 27
                    index: 27
                    line: 1
                  }
                }
              }
            }
            ExpressionStatement {
              loc: Object {
                filename: 'input.js'
                end: Object {
                  column: 38
                  index: 38
                  line: 1
                }
                start: Object {
                  column: 31
                  index: 31
                  line: 1
                }
              }
              expression: AssignmentExpression {
                operator: '='
                loc: Object {
                  filename: 'input.js'
                  end: Object {
                    column: 37
                    index: 37
                    line: 1
                  }
                  start: Object {
                    column: 31
                    index: 31
                    line: 1
                  }
                }
                left: AssignmentIdentifier {
                  name: 't'
                  loc: Object {
                    filename: 'input.js'
                    end: Object {
                      column: 32
                      index: 32
                      line: 1
                    }
                    start: Object {
                      column: 31
                      index: 31
                      line: 1
                    }
                  }
                }
                right: NumericLiteral {
                  value: 42
                  loc: Object {
                    filename: 'input.js'
                    end: Object {
                      column: 37
                      index: 37
                      line: 1
                    }
                    start: Object {
                      column: 35
                      index: 35
                      line: 1
                    }
                  }
                }
              }
            }
            BreakStatement {
              label: undefined
              loc: Object {
                filename: 'input.js'
                end: Object {
                  column: 45
                  index: 45
                  line: 1
                }
                start: Object {
                  column: 39
                  index: 39
                  line: 1
                }
              }
            }
          ]
        }
      ]
    }
  ]
}