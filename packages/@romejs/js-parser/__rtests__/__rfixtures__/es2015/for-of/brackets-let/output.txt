Program {
  comments: Array []
  directives: Array []
  filename: 'input.js'
  hasHoistedVars: false
  interpreter: undefined
  mtime: undefined
  sourceType: 'script'
  syntax: Array []
  loc: Object {
    filename: 'input.js'
    end: Object {
      column: 0
      index: 24
      line: 2
    }
    start: Object {
      column: 0
      index: 0
      line: 1
    }
  }
  diagnostics: Array [
    Object {
      advice: Array []
      category: 'parse/js'
      filename: 'input.js'
      message: 'Unexpected token, expected ";"'
      mtime: undefined
      sourceType: 'script'
      origins: Array [Object {category: 'js-parser'}]
      end: Object {
        column: 10
        index: 10
        line: 1
      }
      start: Object {
        column: 9
        index: 9
        line: 1
      }
    }
  ]
  body: Array [
    ForStatement {
      loc: Object {
        filename: 'input.js'
        end: Object {
          column: 19
          index: 19
          line: 1
        }
        start: Object {
          column: 0
          index: 0
          line: 1
        }
      }
      init: ReferenceIdentifier {
        name: 'let'
        loc: Object {
          filename: 'input.js'
          end: Object {
            column: 8
            index: 8
            line: 1
          }
          start: Object {
            column: 5
            index: 5
            line: 1
          }
        }
      }
      update: ReferenceIdentifier {
        name: 'of'
        loc: Object {
          filename: 'input.js'
          end: Object {
            column: 15
            index: 15
            line: 1
          }
          start: Object {
            column: 13
            index: 13
            line: 1
          }
        }
      }
      body: ExpressionStatement {
        loc: Object {
          filename: 'input.js'
          end: Object {
            column: 19
            index: 19
            line: 1
          }
          start: Object {
            column: 16
            index: 16
            line: 1
          }
        }
        expression: RegExpLiteral {
          global: false
          insensitive: false
          multiline: false
          noDotNewline: false
          sticky: false
          unicode: false
          loc: Object {
            filename: 'input.js'
            end: Object {
              column: 19
              index: 19
              line: 1
            }
            start: Object {
              column: 16
              index: 16
              line: 1
            }
          }
          expression: RegExpSubExpression {
            loc: Object {
              filename: 'input.js'
              end: Object {
                column: 18
                index: 1
                line: 1
              }
              start: Object {
                column: 17
                index: -1
                line: 1
              }
            }
            body: Array [
              RegExpCharacter {
                value: 'b'
                loc: Object {
                  filename: 'input.js'
                  end: Object {
                    column: 18
                    index: 1
                    line: 1
                  }
                  start: Object {
                    column: 18
                    index: 0
                    line: 1
                  }
                }
              }
            ]
          }
        }
      }
      test: ObjectExpression {
        loc: Object {
          filename: 'input.js'
          end: Object {
            column: 12
            index: 12
            line: 1
          }
          start: Object {
            column: 9
            index: 9
            line: 1
          }
        }
        properties: Array [
          ObjectProperty {
            key: StaticPropertyKey {
              value: Identifier {
                name: 'a'
                loc: Object {
                  filename: 'input.js'
                  end: Object {
                    column: 11
                    index: 11
                    line: 1
                  }
                  start: Object {
                    column: 10
                    index: 10
                    line: 1
                  }
                }
              }
              variance: undefined
              loc: Object {
                filename: 'input.js'
                end: Object {
                  column: 11
                  index: 11
                  line: 1
                }
                start: Object {
                  column: 10
                  index: 10
                  line: 1
                }
              }
            }
            value: ReferenceIdentifier {
              name: 'a'
              loc: Object {
                filename: 'input.js'
                end: Object {
                  column: 11
                  index: 11
                  line: 1
                }
                start: Object {
                  column: 10
                  index: 10
                  line: 1
                }
              }
            }
            loc: Object {
              filename: 'input.js'
              end: Object {
                column: 11
                index: 11
                line: 1
              }
              start: Object {
                column: 10
                index: 10
                line: 1
              }
            }
          }
        ]
      }
    }
    ExpressionStatement {
      loc: Object {
        filename: 'input.js'
        end: Object {
          column: 20
          index: 20
          line: 1
        }
        start: Object {
          column: 19
          index: 19
          line: 1
        }
      }
      expression: ReferenceIdentifier {
        name: 'INVALID_PLACEHOLDER'
        loc: Object {
          filename: 'input.js'
          end: Object {
            column: 20
            index: 20
            line: 1
          }
          start: Object {
            column: 19
            index: 19
            line: 1
          }
        }
      }
    }
    BlockStatement {
      body: Array []
      directives: Array []
      loc: Object {
        filename: 'input.js'
        end: Object {
          column: 23
          index: 23
          line: 1
        }
        start: Object {
          column: 21
          index: 21
          line: 1
        }
      }
    }
  ]
}