{
  "empty file": "Object {\n  diagnostics: Array []\n  filters: Array []\n  src: ''\n  ast: Program {\n    body: Array []\n    comments: Array []\n    diagnostics: Array []\n    directives: Array []\n    filename: 'unknown'\n    hasHoistedVars: false\n    interpreter: undefined\n    mtime: undefined\n    sourceType: 'module'\n    syntax: Array []\n    loc: Object {\n      filename: 'unknown'\n      end: Object {\n        column: 0\n        index: 0\n        line: 1\n      }\n      start: Object {\n        column: 0\n        index: 0\n        line: 1\n      }\n    }\n  }\n}",
  "undeclared variable": "Object {\n  filters: Array []\n  src: 'foobar;'\n  diagnostics: Array [\n    Object {\n      category: 'lint/undeclaredVariables'\n      filename: 'unknown'\n      language: 'js'\n      message: 'Undeclared variable <emphasis>foobar</emphasis>'\n      mtime: undefined\n      sourceType: 'module'\n      origins: Array [Object {category: 'lint'}]\n      end: Object {\n        column: 6\n        index: 6\n        line: 1\n      }\n      start: Object {\n        column: 0\n        index: 0\n        line: 1\n      }\n    }\n  ]\n  ast: Program {\n    comments: Array []\n    diagnostics: Array []\n    directives: Array []\n    filename: 'unknown'\n    hasHoistedVars: false\n    interpreter: undefined\n    mtime: undefined\n    sourceType: 'module'\n    syntax: Array []\n    loc: Object {\n      filename: 'unknown'\n      end: Object {\n        column: 7\n        index: 7\n        line: 1\n      }\n      start: Object {\n        column: 0\n        index: 0\n        line: 1\n      }\n    }\n    body: Array [\n      ExpressionStatement {\n        loc: Object {\n          filename: 'unknown'\n          end: Object {\n            column: 7\n            index: 7\n            line: 1\n          }\n          start: Object {\n            column: 0\n            index: 0\n            line: 1\n          }\n        }\n        expression: ReferenceIdentifier {\n          name: 'foobar'\n          loc: Object {\n            filename: 'unknown'\n            end: Object {\n              column: 6\n              index: 6\n              line: 1\n            }\n            start: Object {\n              column: 0\n              index: 0\n              line: 1\n            }\n          }\n        }\n      }\n    ]\n  }\n}",
  "sparse array": "Object {\n  filters: Array []\n  src: '[1,,2]'\n  diagnostics: Array [\n    Object {\n      category: 'lint/sparseArray'\n      filename: 'unknown'\n      language: 'js'\n      message: 'Your array contains an empty slot'\n      mtime: undefined\n      sourceType: 'module'\n      origins: Array [Object {category: 'lint'}]\n      end: Object {\n        column: 6\n        index: 6\n        line: 1\n      }\n      start: Object {\n        column: 0\n        index: 0\n        line: 1\n      }\n    }\n  ]\n  ast: Program {\n    comments: Array []\n    diagnostics: Array []\n    directives: Array []\n    filename: 'unknown'\n    hasHoistedVars: false\n    interpreter: undefined\n    mtime: undefined\n    sourceType: 'module'\n    syntax: Array []\n    loc: Object {\n      filename: 'unknown'\n      end: Object {\n        column: 6\n        index: 6\n        line: 1\n      }\n      start: Object {\n        column: 0\n        index: 0\n        line: 1\n      }\n    }\n    body: Array [\n      ExpressionStatement {\n        loc: Object {\n          filename: 'unknown'\n          end: Object {\n            column: 6\n            index: 6\n            line: 1\n          }\n          start: Object {\n            column: 0\n            index: 0\n            line: 1\n          }\n        }\n        expression: ArrayExpression {\n          loc: undefined\n          elements: Array [\n            NumericLiteral {\n              value: 1\n              loc: Object {\n                filename: 'unknown'\n                end: Object {\n                  column: 2\n                  index: 2\n                  line: 1\n                }\n                start: Object {\n                  column: 1\n                  index: 1\n                  line: 1\n                }\n              }\n            }\n            ReferenceIdentifier {\n              name: 'undefined'\n              loc: undefined\n            }\n            NumericLiteral {\n              value: 2\n              loc: Object {\n                filename: 'unknown'\n                end: Object {\n                  column: 5\n                  index: 5\n                  line: 1\n                }\n                start: Object {\n                  column: 4\n                  index: 4\n                  line: 1\n                }\n              }\n            }\n          ]\n        }\n      }\n    ]\n  }\n}",
  "unsafe negation": "Object {\n  filters: Array []\n  src: '!1 in [1,2]'\n  diagnostics: Array [\n    Object {\n      category: 'lint/unsafeNegation'\n      filename: 'unknown'\n      language: 'js'\n      message: 'Unsafe usage of negation operator in left side of binary expression'\n      mtime: undefined\n      sourceType: 'module'\n      origins: Array [Object {category: 'lint'}]\n      end: Object {\n        column: 11\n        index: 11\n        line: 1\n      }\n      start: Object {\n        column: 0\n        index: 0\n        line: 1\n      }\n    }\n  ]\n  ast: Program {\n    comments: Array []\n    diagnostics: Array []\n    directives: Array []\n    filename: 'unknown'\n    hasHoistedVars: false\n    interpreter: undefined\n    mtime: undefined\n    sourceType: 'module'\n    syntax: Array []\n    loc: Object {\n      filename: 'unknown'\n      end: Object {\n        column: 11\n        index: 11\n        line: 1\n      }\n      start: Object {\n        column: 0\n        index: 0\n        line: 1\n      }\n    }\n    body: Array [\n      ExpressionStatement {\n        loc: Object {\n          filename: 'unknown'\n          end: Object {\n            column: 11\n            index: 11\n            line: 1\n          }\n          start: Object {\n            column: 0\n            index: 0\n            line: 1\n          }\n        }\n        expression: BinaryExpression {\n          operator: 'in'\n          loc: Object {\n            filename: 'unknown'\n            end: Object {\n              column: 11\n              index: 11\n              line: 1\n            }\n            start: Object {\n              column: 0\n              index: 0\n              line: 1\n            }\n          }\n          left: UnaryExpression {\n            operator: '!'\n            prefix: true\n            loc: Object {\n              filename: 'unknown'\n              end: Object {\n                column: 2\n                index: 2\n                line: 1\n              }\n              start: Object {\n                column: 0\n                index: 0\n                line: 1\n              }\n            }\n            argument: NumericLiteral {\n              value: 1\n              loc: Object {\n                filename: 'unknown'\n                end: Object {\n                  column: 2\n                  index: 2\n                  line: 1\n                }\n                start: Object {\n                  column: 1\n                  index: 1\n                  line: 1\n                }\n              }\n            }\n          }\n          right: ArrayExpression {\n            loc: Object {\n              filename: 'unknown'\n              end: Object {\n                column: 11\n                index: 11\n                line: 1\n              }\n              start: Object {\n                column: 6\n                index: 6\n                line: 1\n              }\n            }\n            elements: Array [\n              NumericLiteral {\n                value: 1\n                loc: Object {\n                  filename: 'unknown'\n                  end: Object {\n                    column: 8\n                    index: 8\n                    line: 1\n                  }\n                  start: Object {\n                    column: 7\n                    index: 7\n                    line: 1\n                  }\n                }\n              }\n              NumericLiteral {\n                value: 2\n                loc: Object {\n                  filename: 'unknown'\n                  end: Object {\n                    column: 10\n                    index: 10\n                    line: 1\n                  }\n                  start: Object {\n                    column: 9\n                    index: 9\n                    line: 1\n                  }\n                }\n              }\n            ]\n          }\n        }\n      }\n    ]\n  }\n}",
  "no cond assign": "Object {\n  filters: Array []\n  src: 'for (let i = 1; i = 10; i++) {\\n      console.log(\\'foo\\')\\n    }'\n  diagnostics: Array [\n    Object {\n      category: 'lint/noCondAssign'\n      filename: 'unknown'\n      language: 'js'\n      message: 'Cannot assign variable in loop condition'\n      mtime: undefined\n      sourceType: 'module'\n      origins: Array [Object {category: 'lint'}]\n      end: Object {\n        column: 5\n        index: 61\n        line: 3\n      }\n      start: Object {\n        column: 0\n        index: 0\n        line: 1\n      }\n    }\n  ]\n  ast: Program {\n    comments: Array []\n    diagnostics: Array []\n    directives: Array []\n    filename: 'unknown'\n    hasHoistedVars: false\n    interpreter: undefined\n    mtime: undefined\n    sourceType: 'module'\n    syntax: Array []\n    loc: Object {\n      filename: 'unknown'\n      end: Object {\n        column: 5\n        index: 61\n        line: 3\n      }\n      start: Object {\n        column: 0\n        index: 0\n        line: 1\n      }\n    }\n    body: Array [\n      ForStatement {\n        loc: Object {\n          filename: 'unknown'\n          end: Object {\n            column: 5\n            index: 61\n            line: 3\n          }\n          start: Object {\n            column: 0\n            index: 0\n            line: 1\n          }\n        }\n        update: UpdateExpression {\n          operator: '++'\n          prefix: false\n          loc: Object {\n            filename: 'unknown'\n            end: Object {\n              column: 27\n              index: 27\n              line: 1\n            }\n            start: Object {\n              column: 24\n              index: 24\n              line: 1\n            }\n          }\n          argument: ReferenceIdentifier {\n            name: 'i'\n            loc: Object {\n              filename: 'unknown'\n              end: Object {\n                column: 25\n                index: 25\n                line: 1\n              }\n              start: Object {\n                column: 24\n                index: 24\n                line: 1\n              }\n            }\n          }\n        }\n        test: AssignmentExpression {\n          operator: '='\n          loc: Object {\n            filename: 'unknown'\n            end: Object {\n              column: 22\n              index: 22\n              line: 1\n            }\n            start: Object {\n              column: 16\n              index: 16\n              line: 1\n            }\n          }\n          left: AssignmentIdentifier {\n            name: 'i'\n            loc: Object {\n              filename: 'unknown'\n              end: Object {\n                column: 17\n                index: 17\n                line: 1\n              }\n              start: Object {\n                column: 16\n                index: 16\n                line: 1\n              }\n            }\n          }\n          right: NumericLiteral {\n            value: 10\n            loc: Object {\n              filename: 'unknown'\n              end: Object {\n                column: 22\n                index: 22\n                line: 1\n              }\n              start: Object {\n                column: 20\n                index: 20\n                line: 1\n              }\n            }\n          }\n        }\n        init: VariableDeclaration {\n          kind: 'let'\n          loc: Object {\n            filename: 'unknown'\n            end: Object {\n              column: 14\n              index: 14\n              line: 1\n            }\n            start: Object {\n              column: 5\n              index: 5\n              line: 1\n            }\n          }\n          declarations: Array [\n            VariableDeclarator {\n              id: BindingIdentifier {\n                name: 'i'\n                loc: Object {\n                  filename: 'unknown'\n                  end: Object {\n                    column: 10\n                    index: 10\n                    line: 1\n                  }\n                  start: Object {\n                    column: 9\n                    index: 9\n                    line: 1\n                  }\n                }\n              }\n              loc: Object {\n                filename: 'unknown'\n                end: Object {\n                  column: 14\n                  index: 14\n                  line: 1\n                }\n                start: Object {\n                  column: 9\n                  index: 9\n                  line: 1\n                }\n              }\n              init: NumericLiteral {\n                value: 1\n                loc: Object {\n                  filename: 'unknown'\n                  end: Object {\n                    column: 14\n                    index: 14\n                    line: 1\n                  }\n                  start: Object {\n                    column: 13\n                    index: 13\n                    line: 1\n                  }\n                }\n              }\n            }\n          ]\n        }\n        body: BlockStatement {\n          directives: Array []\n          loc: Object {\n            filename: 'unknown'\n            end: Object {\n              column: 5\n              index: 61\n              line: 3\n            }\n            start: Object {\n              column: 29\n              index: 29\n              line: 1\n            }\n          }\n          body: Array [\n            ExpressionStatement {\n              loc: Object {\n                filename: 'unknown'\n                end: Object {\n                  column: 24\n                  index: 55\n                  line: 2\n                }\n                start: Object {\n                  column: 6\n                  index: 37\n                  line: 2\n                }\n              }\n              expression: CallExpression {\n                loc: Object {\n                  filename: 'unknown'\n                  end: Object {\n                    column: 24\n                    index: 55\n                    line: 2\n                  }\n                  start: Object {\n                    column: 6\n                    index: 37\n                    line: 2\n                  }\n                }\n                arguments: Array [\n                  StringLiteral {\n                    value: 'foo'\n                    loc: Object {\n                      filename: 'unknown'\n                      end: Object {\n                        column: 23\n                        index: 54\n                        line: 2\n                      }\n                      start: Object {\n                        column: 18\n                        index: 49\n                        line: 2\n                      }\n                    }\n                  }\n                ]\n                callee: MemberExpression {\n                  loc: Object {\n                    filename: 'unknown'\n                    end: Object {\n                      column: 17\n                      index: 48\n                      line: 2\n                    }\n                    start: Object {\n                      column: 6\n                      index: 37\n                      line: 2\n                    }\n                  }\n                  object: ReferenceIdentifier {\n                    name: 'console'\n                    loc: Object {\n                      filename: 'unknown'\n                      end: Object {\n                        column: 13\n                        index: 44\n                        line: 2\n                      }\n                      start: Object {\n                        column: 6\n                        index: 37\n                        line: 2\n                      }\n                    }\n                  }\n                  property: StaticMemberProperty {\n                    value: Identifier {\n                      name: 'log'\n                      loc: Object {\n                        filename: 'unknown'\n                        end: Object {\n                          column: 17\n                          index: 48\n                          line: 2\n                        }\n                        start: Object {\n                          column: 14\n                          index: 45\n                          line: 2\n                        }\n                      }\n                    }\n                    loc: Object {\n                      filename: 'unknown'\n                      end: Object {\n                        column: 17\n                        index: 48\n                        line: 2\n                      }\n                      start: Object {\n                        column: 14\n                        index: 45\n                        line: 2\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          ]\n        }\n      }\n    ]\n  }\n}",
  "disallow var": "Object {\n  filters: Array []\n  src: 'var foobar;\\nfoobar'\n  diagnostics: Array [\n    Object {\n      category: 'lint/disallowVar'\n      filename: 'unknown'\n      language: 'js'\n      message: 'Variable declarations using `var` are disallowed, use `let` or `const` instead.'\n      mtime: undefined\n      sourceType: 'module'\n      origins: Array [Object {category: 'lint'}]\n      end: Object {\n        column: 11\n        index: 11\n        line: 1\n      }\n      start: Object {\n        column: 0\n        index: 0\n        line: 1\n      }\n    }\n  ]\n  ast: Program {\n    comments: Array []\n    diagnostics: Array []\n    directives: Array []\n    filename: 'unknown'\n    hasHoistedVars: true\n    interpreter: undefined\n    mtime: undefined\n    sourceType: 'module'\n    syntax: Array []\n    loc: Object {\n      filename: 'unknown'\n      end: Object {\n        column: 6\n        index: 18\n        line: 2\n      }\n      start: Object {\n        column: 0\n        index: 0\n        line: 1\n      }\n    }\n    body: Array [\n      VariableDeclarationStatement {\n        loc: Object {\n          filename: 'unknown'\n          end: Object {\n            column: 11\n            index: 11\n            line: 1\n          }\n          start: Object {\n            column: 0\n            index: 0\n            line: 1\n          }\n        }\n        declaration: VariableDeclaration {\n          kind: 'var'\n          loc: Object {\n            filename: 'unknown'\n            end: Object {\n              column: 11\n              index: 11\n              line: 1\n            }\n            start: Object {\n              column: 0\n              index: 0\n              line: 1\n            }\n          }\n          declarations: Array [\n            VariableDeclarator {\n              id: BindingIdentifier {\n                name: 'foobar'\n                loc: Object {\n                  filename: 'unknown'\n                  end: Object {\n                    column: 10\n                    index: 10\n                    line: 1\n                  }\n                  start: Object {\n                    column: 4\n                    index: 4\n                    line: 1\n                  }\n                }\n              }\n              init: undefined\n              loc: Object {\n                filename: 'unknown'\n                end: Object {\n                  column: 10\n                  index: 10\n                  line: 1\n                }\n                start: Object {\n                  column: 4\n                  index: 4\n                  line: 1\n                }\n              }\n            }\n          ]\n        }\n      }\n      ExpressionStatement {\n        loc: Object {\n          filename: 'unknown'\n          end: Object {\n            column: 6\n            index: 18\n            line: 2\n          }\n          start: Object {\n            column: 0\n            index: 12\n            line: 2\n          }\n        }\n        expression: ReferenceIdentifier {\n          name: 'foobar'\n          loc: Object {\n            filename: 'unknown'\n            end: Object {\n              column: 6\n              index: 18\n              line: 2\n            }\n            start: Object {\n              column: 0\n              index: 12\n              line: 2\n            }\n          }\n        }\n      }\n    ]\n  }\n}",
  "no cond assign: 1": "Object {\n  filters: Array []\n  src: 'if(foo = \\'bar\\') {\\n      console.log(\\'foo\\')\\n    }'\n  diagnostics: Array [\n    Object {\n      category: 'lint/noCondAssign'\n      filename: 'unknown'\n      language: 'js'\n      message: 'Cannot assign variable in loop condition'\n      mtime: undefined\n      sourceType: 'module'\n      origins: Array [Object {category: 'lint'}]\n      end: Object {\n        column: 5\n        index: 48\n        line: 3\n      }\n      start: Object {\n        column: 0\n        index: 0\n        line: 1\n      }\n    }\n  ]\n  ast: Program {\n    comments: Array []\n    diagnostics: Array []\n    directives: Array []\n    filename: 'unknown'\n    hasHoistedVars: false\n    interpreter: undefined\n    mtime: undefined\n    sourceType: 'module'\n    syntax: Array []\n    loc: Object {\n      filename: 'unknown'\n      end: Object {\n        column: 5\n        index: 48\n        line: 3\n      }\n      start: Object {\n        column: 0\n        index: 0\n        line: 1\n      }\n    }\n    body: Array [\n      IfStatement {\n        alternate: undefined\n        loc: Object {\n          filename: 'unknown'\n          end: Object {\n            column: 5\n            index: 48\n            line: 3\n          }\n          start: Object {\n            column: 0\n            index: 0\n            line: 1\n          }\n        }\n        test: AssignmentExpression {\n          operator: '='\n          loc: Object {\n            filename: 'unknown'\n            end: Object {\n              column: 14\n              index: 14\n              line: 1\n            }\n            start: Object {\n              column: 3\n              index: 3\n              line: 1\n            }\n          }\n          left: AssignmentIdentifier {\n            name: 'foo'\n            loc: Object {\n              filename: 'unknown'\n              end: Object {\n                column: 6\n                index: 6\n                line: 1\n              }\n              start: Object {\n                column: 3\n                index: 3\n                line: 1\n              }\n            }\n          }\n          right: StringLiteral {\n            value: 'bar'\n            loc: Object {\n              filename: 'unknown'\n              end: Object {\n                column: 14\n                index: 14\n                line: 1\n              }\n              start: Object {\n                column: 9\n                index: 9\n                line: 1\n              }\n            }\n          }\n        }\n        consequent: BlockStatement {\n          directives: Array []\n          loc: Object {\n            filename: 'unknown'\n            end: Object {\n              column: 5\n              index: 48\n              line: 3\n            }\n            start: Object {\n              column: 16\n              index: 16\n              line: 1\n            }\n          }\n          body: Array [\n            ExpressionStatement {\n              loc: Object {\n                filename: 'unknown'\n                end: Object {\n                  column: 24\n                  index: 42\n                  line: 2\n                }\n                start: Object {\n                  column: 6\n                  index: 24\n                  line: 2\n                }\n              }\n              expression: CallExpression {\n                loc: Object {\n                  filename: 'unknown'\n                  end: Object {\n                    column: 24\n                    index: 42\n                    line: 2\n                  }\n                  start: Object {\n                    column: 6\n                    index: 24\n                    line: 2\n                  }\n                }\n                arguments: Array [\n                  StringLiteral {\n                    value: 'foo'\n                    loc: Object {\n                      filename: 'unknown'\n                      end: Object {\n                        column: 23\n                        index: 41\n                        line: 2\n                      }\n                      start: Object {\n                        column: 18\n                        index: 36\n                        line: 2\n                      }\n                    }\n                  }\n                ]\n                callee: MemberExpression {\n                  loc: Object {\n                    filename: 'unknown'\n                    end: Object {\n                      column: 17\n                      index: 35\n                      line: 2\n                    }\n                    start: Object {\n                      column: 6\n                      index: 24\n                      line: 2\n                    }\n                  }\n                  object: ReferenceIdentifier {\n                    name: 'console'\n                    loc: Object {\n                      filename: 'unknown'\n                      end: Object {\n                        column: 13\n                        index: 31\n                        line: 2\n                      }\n                      start: Object {\n                        column: 6\n                        index: 24\n                        line: 2\n                      }\n                    }\n                  }\n                  property: StaticMemberProperty {\n                    value: Identifier {\n                      name: 'log'\n                      loc: Object {\n                        filename: 'unknown'\n                        end: Object {\n                          column: 17\n                          index: 35\n                          line: 2\n                        }\n                        start: Object {\n                          column: 14\n                          index: 32\n                          line: 2\n                        }\n                      }\n                    }\n                    loc: Object {\n                      filename: 'unknown'\n                      end: Object {\n                        column: 17\n                        index: 35\n                        line: 2\n                      }\n                      start: Object {\n                        column: 14\n                        index: 32\n                        line: 2\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          ]\n        }\n      }\n    ]\n  }\n}",
  "no cond assign: 2": "Object {\n  filters: Array []\n  src: 'while (foo = \\'bar\\' {\\n      console.log(\\'foo\\')\\n    }'\n  diagnostics: Array [\n    Object {\n      category: 'parse/js'\n      filename: 'unknown'\n      message: 'Unclosed while test'\n      mtime: undefined\n      sourceType: 'module'\n      origins: Array [Object {category: 'js-parser'}]\n      end: Object {\n        column: 6\n        index: 6\n        line: 1\n      }\n      start: Object {\n        column: 6\n        index: 6\n        line: 1\n      }\n      advice: Array [\n        log {\n          category: 'info'\n          message: 'We expected to find the closing character <emphasis>)</emphasis> here'\n        }\n        frame {\n          filename: 'unknown'\n          end: Object {\n            column: 19\n            index: 19\n            line: 1\n          }\n          start: Object {\n            column: 19\n            index: 19\n            line: 1\n          }\n        }\n      ]\n    }\n    Object {\n      category: 'lint/noCondAssign'\n      filename: 'unknown'\n      language: 'js'\n      message: 'Cannot assign variable in loop condition'\n      mtime: undefined\n      sourceType: 'module'\n      origins: Array [Object {category: 'lint'}]\n      end: Object {\n        column: 5\n        index: 51\n        line: 3\n      }\n      start: Object {\n        column: 0\n        index: 0\n        line: 1\n      }\n    }\n  ]\n  ast: Program {\n    comments: Array []\n    directives: Array []\n    filename: 'unknown'\n    hasHoistedVars: false\n    interpreter: undefined\n    mtime: undefined\n    sourceType: 'module'\n    syntax: Array []\n    loc: Object {\n      filename: 'unknown'\n      end: Object {\n        column: 5\n        index: 51\n        line: 3\n      }\n      start: Object {\n        column: 0\n        index: 0\n        line: 1\n      }\n    }\n    diagnostics: Array [\n      Object {\n        category: 'parse/js'\n        filename: 'unknown'\n        message: 'Unclosed while test'\n        mtime: undefined\n        sourceType: 'module'\n        origins: Array [Object {category: 'js-parser'}]\n        end: Object {\n          column: 6\n          index: 6\n          line: 1\n        }\n        start: Object {\n          column: 6\n          index: 6\n          line: 1\n        }\n        advice: Array [\n          log {\n            category: 'info'\n            message: 'We expected to find the closing character <emphasis>)</emphasis> here'\n          }\n          frame {\n            filename: 'unknown'\n            end: Object {\n              column: 19\n              index: 19\n              line: 1\n            }\n            start: Object {\n              column: 19\n              index: 19\n              line: 1\n            }\n          }\n        ]\n      }\n    ]\n    body: Array [\n      WhileStatement {\n        loc: Object {\n          filename: 'unknown'\n          end: Object {\n            column: 5\n            index: 51\n            line: 3\n          }\n          start: Object {\n            column: 0\n            index: 0\n            line: 1\n          }\n        }\n        test: AssignmentExpression {\n          operator: '='\n          loc: Object {\n            filename: 'unknown'\n            end: Object {\n              column: 18\n              index: 18\n              line: 1\n            }\n            start: Object {\n              column: 7\n              index: 7\n              line: 1\n            }\n          }\n          left: AssignmentIdentifier {\n            name: 'foo'\n            loc: Object {\n              filename: 'unknown'\n              end: Object {\n                column: 10\n                index: 10\n                line: 1\n              }\n              start: Object {\n                column: 7\n                index: 7\n                line: 1\n              }\n            }\n          }\n          right: StringLiteral {\n            value: 'bar'\n            loc: Object {\n              filename: 'unknown'\n              end: Object {\n                column: 18\n                index: 18\n                line: 1\n              }\n              start: Object {\n                column: 13\n                index: 13\n                line: 1\n              }\n            }\n          }\n        }\n        body: BlockStatement {\n          directives: Array []\n          loc: Object {\n            filename: 'unknown'\n            end: Object {\n              column: 5\n              index: 51\n              line: 3\n            }\n            start: Object {\n              column: 19\n              index: 19\n              line: 1\n            }\n          }\n          body: Array [\n            ExpressionStatement {\n              loc: Object {\n                filename: 'unknown'\n                end: Object {\n                  column: 24\n                  index: 45\n                  line: 2\n                }\n                start: Object {\n                  column: 6\n                  index: 27\n                  line: 2\n                }\n              }\n              expression: CallExpression {\n                loc: Object {\n                  filename: 'unknown'\n                  end: Object {\n                    column: 24\n                    index: 45\n                    line: 2\n                  }\n                  start: Object {\n                    column: 6\n                    index: 27\n                    line: 2\n                  }\n                }\n                arguments: Array [\n                  StringLiteral {\n                    value: 'foo'\n                    loc: Object {\n                      filename: 'unknown'\n                      end: Object {\n                        column: 23\n                        index: 44\n                        line: 2\n                      }\n                      start: Object {\n                        column: 18\n                        index: 39\n                        line: 2\n                      }\n                    }\n                  }\n                ]\n                callee: MemberExpression {\n                  loc: Object {\n                    filename: 'unknown'\n                    end: Object {\n                      column: 17\n                      index: 38\n                      line: 2\n                    }\n                    start: Object {\n                      column: 6\n                      index: 27\n                      line: 2\n                    }\n                  }\n                  object: ReferenceIdentifier {\n                    name: 'console'\n                    loc: Object {\n                      filename: 'unknown'\n                      end: Object {\n                        column: 13\n                        index: 34\n                        line: 2\n                      }\n                      start: Object {\n                        column: 6\n                        index: 27\n                        line: 2\n                      }\n                    }\n                  }\n                  property: StaticMemberProperty {\n                    value: Identifier {\n                      name: 'log'\n                      loc: Object {\n                        filename: 'unknown'\n                        end: Object {\n                          column: 17\n                          index: 38\n                          line: 2\n                        }\n                        start: Object {\n                          column: 14\n                          index: 35\n                          line: 2\n                        }\n                      }\n                    }\n                    loc: Object {\n                      filename: 'unknown'\n                      end: Object {\n                        column: 17\n                        index: 38\n                        line: 2\n                      }\n                      start: Object {\n                        column: 14\n                        index: 35\n                        line: 2\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          ]\n        }\n      }\n    ]\n  }\n}",
  "no async promise executor": "Object {\n  filters: Array []\n  src: 'new Promise(async function foo() {})'\n  diagnostics: Array [\n    Object {\n      category: 'lint/noAsyncPromiseExecutor'\n      filename: 'unknown'\n      language: 'js'\n      message: 'Promise executor functions should not be async.'\n      mtime: undefined\n      sourceType: 'module'\n      origins: Array [Object {category: 'lint'}]\n      end: Object {\n        column: 35\n        index: 35\n        line: 1\n      }\n      start: Object {\n        column: 12\n        index: 12\n        line: 1\n      }\n    }\n  ]\n  ast: Program {\n    comments: Array []\n    diagnostics: Array []\n    directives: Array []\n    filename: 'unknown'\n    hasHoistedVars: false\n    interpreter: undefined\n    mtime: undefined\n    sourceType: 'module'\n    syntax: Array []\n    loc: Object {\n      filename: 'unknown'\n      end: Object {\n        column: 36\n        index: 36\n        line: 1\n      }\n      start: Object {\n        column: 0\n        index: 0\n        line: 1\n      }\n    }\n    body: Array [\n      ExpressionStatement {\n        loc: Object {\n          filename: 'unknown'\n          end: Object {\n            column: 36\n            index: 36\n            line: 1\n          }\n          start: Object {\n            column: 0\n            index: 0\n            line: 1\n          }\n        }\n        expression: NewExpression {\n          optional: undefined\n          typeArguments: undefined\n          loc: Object {\n            filename: 'unknown'\n            end: Object {\n              column: 36\n              index: 36\n              line: 1\n            }\n            start: Object {\n              column: 0\n              index: 0\n              line: 1\n            }\n          }\n          callee: ReferenceIdentifier {\n            name: 'Promise'\n            loc: Object {\n              filename: 'unknown'\n              end: Object {\n                column: 11\n                index: 11\n                line: 1\n              }\n              start: Object {\n                column: 4\n                index: 4\n                line: 1\n              }\n            }\n          }\n          arguments: Array [\n            FunctionExpression {\n              id: BindingIdentifier {\n                name: 'foo'\n                loc: Object {\n                  filename: 'unknown'\n                  end: Object {\n                    column: 30\n                    index: 30\n                    line: 1\n                  }\n                  start: Object {\n                    column: 27\n                    index: 27\n                    line: 1\n                  }\n                }\n              }\n              loc: Object {\n                filename: 'unknown'\n                end: Object {\n                  column: 35\n                  index: 35\n                  line: 1\n                }\n                start: Object {\n                  column: 12\n                  index: 12\n                  line: 1\n                }\n              }\n              body: BlockStatement {\n                body: Array []\n                directives: Array []\n                loc: Object {\n                  filename: 'unknown'\n                  end: Object {\n                    column: 35\n                    index: 35\n                    line: 1\n                  }\n                  start: Object {\n                    column: 33\n                    index: 33\n                    line: 1\n                  }\n                }\n              }\n              head: FunctionHead {\n                async: true\n                generator: false\n                hasHoistedVars: false\n                params: Array []\n                predicate: undefined\n                rest: undefined\n                returnType: undefined\n                thisType: undefined\n                typeParameters: undefined\n                loc: Object {\n                  filename: 'unknown'\n                  end: Object {\n                    column: 33\n                    index: 33\n                    line: 1\n                  }\n                  start: Object {\n                    column: 12\n                    index: 12\n                    line: 1\n                  }\n                }\n              }\n            }\n          ]\n        }\n      }\n    ]\n  }\n}",
  "no cond assign: 3": "Object {\n  filters: Array []\n  src: 'do {\\n      console.log(\\'foo)\\n    } while (foo = \\'bar\\')'\n  diagnostics: Array [\n    Object {\n      advice: undefined\n      category: 'parse/js'\n      filename: 'unknown'\n      message: 'Unterminated string constant'\n      mtime: undefined\n      sourceType: 'module'\n      origins: Array [Object {category: 'js-parser'}]\n      end: Object {\n        column: 0\n        index: 28\n        line: 3\n      }\n      start: Object {\n        column: 0\n        index: 28\n        line: 3\n      }\n    }\n    Object {\n      category: 'lint/undeclaredVariables'\n      filename: 'unknown'\n      language: 'js'\n      message: 'Undeclared variable <emphasis>INVALID_PLACEHOLDER</emphasis>'\n      mtime: undefined\n      sourceType: 'module'\n      origins: Array [Object {category: 'lint'}]\n      end: Object {\n        column: 50\n        index: 55\n        line: 2\n      }\n      start: Object {\n        column: 50\n        index: 55\n        line: 2\n      }\n    }\n    Object {\n      category: 'lint/undeclaredVariables'\n      filename: 'unknown'\n      language: 'js'\n      message: 'Undeclared variable <emphasis>bar</emphasis>'\n      mtime: undefined\n      sourceType: 'module'\n      origins: Array [Object {category: 'lint'}]\n      end: Object {\n        column: 47\n        index: 52\n        line: 2\n      }\n      start: Object {\n        column: 44\n        index: 49\n        line: 2\n      }\n    }\n  ]\n  ast: Program {\n    comments: Array []\n    directives: Array []\n    filename: 'unknown'\n    hasHoistedVars: false\n    interpreter: undefined\n    mtime: undefined\n    sourceType: 'module'\n    syntax: Array []\n    loc: Object {\n      filename: 'unknown'\n      end: Object {\n        column: 50\n        index: 55\n        line: 2\n      }\n      start: Object {\n        column: 0\n        index: 0\n        line: 1\n      }\n    }\n    diagnostics: Array [\n      Object {\n        advice: undefined\n        category: 'parse/js'\n        filename: 'unknown'\n        message: 'Unterminated string constant'\n        mtime: undefined\n        sourceType: 'module'\n        origins: Array [Object {category: 'js-parser'}]\n        end: Object {\n          column: 0\n          index: 28\n          line: 3\n        }\n        start: Object {\n          column: 0\n          index: 28\n          line: 3\n        }\n      }\n    ]\n    body: Array [\n      DoWhileStatement {\n        loc: Object {\n          filename: 'unknown'\n          end: Object {\n            column: 50\n            index: 55\n            line: 2\n          }\n          start: Object {\n            column: 0\n            index: 0\n            line: 1\n          }\n        }\n        test: ReferenceIdentifier {\n          name: 'INVALID_PLACEHOLDER'\n          loc: Object {\n            filename: 'unknown'\n            end: Object {\n              column: 50\n              index: 55\n              line: 2\n            }\n            start: Object {\n              column: 50\n              index: 55\n              line: 2\n            }\n          }\n        }\n        body: BlockStatement {\n          directives: Array []\n          loc: Object {\n            filename: 'unknown'\n            end: Object {\n              column: 50\n              index: 55\n              line: 2\n            }\n            start: Object {\n              column: 3\n              index: 3\n              line: 1\n            }\n          }\n          body: Array [\n            ExpressionStatement {\n              loc: Object {\n                filename: 'unknown'\n                end: Object {\n                  column: 44\n                  index: 49\n                  line: 2\n                }\n                start: Object {\n                  column: 6\n                  index: 11\n                  line: 2\n                }\n              }\n              expression: CallExpression {\n                loc: Object {\n                  filename: 'unknown'\n                  end: Object {\n                    column: 44\n                    index: 49\n                    line: 2\n                  }\n                  start: Object {\n                    column: 6\n                    index: 11\n                    line: 2\n                  }\n                }\n                arguments: Array [\n                  StringLiteral {\n                    value: 'foo)\\n    } while (foo = '\n                    loc: Object {\n                      filename: 'unknown'\n                      end: Object {\n                        column: 44\n                        index: 49\n                        line: 2\n                      }\n                      start: Object {\n                        column: 18\n                        index: 23\n                        line: 2\n                      }\n                    }\n                  }\n                ]\n                callee: MemberExpression {\n                  loc: Object {\n                    filename: 'unknown'\n                    end: Object {\n                      column: 17\n                      index: 22\n                      line: 2\n                    }\n                    start: Object {\n                      column: 6\n                      index: 11\n                      line: 2\n                    }\n                  }\n                  object: ReferenceIdentifier {\n                    name: 'console'\n                    loc: Object {\n                      filename: 'unknown'\n                      end: Object {\n                        column: 13\n                        index: 18\n                        line: 2\n                      }\n                      start: Object {\n                        column: 6\n                        index: 11\n                        line: 2\n                      }\n                    }\n                  }\n                  property: StaticMemberProperty {\n                    value: Identifier {\n                      name: 'log'\n                      loc: Object {\n                        filename: 'unknown'\n                        end: Object {\n                          column: 17\n                          index: 22\n                          line: 2\n                        }\n                        start: Object {\n                          column: 14\n                          index: 19\n                          line: 2\n                        }\n                      }\n                    }\n                    loc: Object {\n                      filename: 'unknown'\n                      end: Object {\n                        column: 17\n                        index: 22\n                        line: 2\n                      }\n                      start: Object {\n                        column: 14\n                        index: 19\n                        line: 2\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            ExpressionStatement {\n              loc: Object {\n                filename: 'unknown'\n                end: Object {\n                  column: 47\n                  index: 52\n                  line: 2\n                }\n                start: Object {\n                  column: 44\n                  index: 49\n                  line: 2\n                }\n              }\n              expression: ReferenceIdentifier {\n                name: 'bar'\n                loc: Object {\n                  filename: 'unknown'\n                  end: Object {\n                    column: 47\n                    index: 52\n                    line: 2\n                  }\n                  start: Object {\n                    column: 44\n                    index: 49\n                    line: 2\n                  }\n                }\n              }\n            }\n            ExpressionStatement {\n              loc: Object {\n                filename: 'unknown'\n                end: Object {\n                  column: 50\n                  index: 55\n                  line: 2\n                }\n                start: Object {\n                  column: 47\n                  index: 52\n                  line: 2\n                }\n              }\n              expression: StringLiteral {\n                value: ')'\n                loc: Object {\n                  filename: 'unknown'\n                  end: Object {\n                    column: 50\n                    index: 55\n                    line: 2\n                  }\n                  start: Object {\n                    column: 47\n                    index: 52\n                    line: 2\n                  }\n                }\n              }\n            }\n          ]\n        }\n      }\n    ]\n  }\n}",
  "no async promise executor: 1": "Object {\n  filters: Array []\n  src: 'new Promise(async () => {})'\n  diagnostics: Array [\n    Object {\n      category: 'lint/noAsyncPromiseExecutor'\n      filename: 'unknown'\n      language: 'js'\n      message: 'Promise executor functions should not be async.'\n      mtime: undefined\n      sourceType: 'module'\n      origins: Array [Object {category: 'lint'}]\n      end: Object {\n        column: 26\n        index: 26\n        line: 1\n      }\n      start: Object {\n        column: 12\n        index: 12\n        line: 1\n      }\n    }\n  ]\n  ast: Program {\n    comments: Array []\n    diagnostics: Array []\n    directives: Array []\n    filename: 'unknown'\n    hasHoistedVars: false\n    interpreter: undefined\n    mtime: undefined\n    sourceType: 'module'\n    syntax: Array []\n    loc: Object {\n      filename: 'unknown'\n      end: Object {\n        column: 27\n        index: 27\n        line: 1\n      }\n      start: Object {\n        column: 0\n        index: 0\n        line: 1\n      }\n    }\n    body: Array [\n      ExpressionStatement {\n        loc: Object {\n          filename: 'unknown'\n          end: Object {\n            column: 27\n            index: 27\n            line: 1\n          }\n          start: Object {\n            column: 0\n            index: 0\n            line: 1\n          }\n        }\n        expression: NewExpression {\n          optional: undefined\n          typeArguments: undefined\n          loc: Object {\n            filename: 'unknown'\n            end: Object {\n              column: 27\n              index: 27\n              line: 1\n            }\n            start: Object {\n              column: 0\n              index: 0\n              line: 1\n            }\n          }\n          callee: ReferenceIdentifier {\n            name: 'Promise'\n            loc: Object {\n              filename: 'unknown'\n              end: Object {\n                column: 11\n                index: 11\n                line: 1\n              }\n              start: Object {\n                column: 4\n                index: 4\n                line: 1\n              }\n            }\n          }\n          arguments: Array [\n            ArrowFunctionExpression {\n              loc: Object {\n                filename: 'unknown'\n                end: Object {\n                  column: 26\n                  index: 26\n                  line: 1\n                }\n                start: Object {\n                  column: 12\n                  index: 12\n                  line: 1\n                }\n              }\n              body: BlockStatement {\n                body: Array []\n                directives: Array []\n                loc: Object {\n                  filename: 'unknown'\n                  end: Object {\n                    column: 26\n                    index: 26\n                    line: 1\n                  }\n                  start: Object {\n                    column: 24\n                    index: 24\n                    line: 1\n                  }\n                }\n              }\n              head: FunctionHead {\n                async: true\n                hasHoistedVars: false\n                params: Array []\n                rest: undefined\n                returnType: undefined\n                thisType: undefined\n                loc: Object {\n                  filename: 'unknown'\n                  end: Object {\n                    column: 24\n                    index: 24\n                    line: 1\n                  }\n                  start: Object {\n                    column: 12\n                    index: 12\n                    line: 1\n                  }\n                }\n              }\n            }\n          ]\n        }\n      }\n    ]\n  }\n}",
  "no async promise executor: 2": "Object {\n  filters: Array []\n  src: 'new Promise(((((async () => {})))))'\n  diagnostics: Array [\n    Object {\n      category: 'lint/noAsyncPromiseExecutor'\n      filename: 'unknown'\n      language: 'js'\n      message: 'Promise executor functions should not be async.'\n      mtime: undefined\n      sourceType: 'module'\n      origins: Array [Object {category: 'lint'}]\n      end: Object {\n        column: 30\n        index: 30\n        line: 1\n      }\n      start: Object {\n        column: 16\n        index: 16\n        line: 1\n      }\n    }\n  ]\n  ast: Program {\n    comments: Array []\n    diagnostics: Array []\n    directives: Array []\n    filename: 'unknown'\n    hasHoistedVars: false\n    interpreter: undefined\n    mtime: undefined\n    sourceType: 'module'\n    syntax: Array []\n    loc: Object {\n      filename: 'unknown'\n      end: Object {\n        column: 35\n        index: 35\n        line: 1\n      }\n      start: Object {\n        column: 0\n        index: 0\n        line: 1\n      }\n    }\n    body: Array [\n      ExpressionStatement {\n        loc: Object {\n          filename: 'unknown'\n          end: Object {\n            column: 35\n            index: 35\n            line: 1\n          }\n          start: Object {\n            column: 0\n            index: 0\n            line: 1\n          }\n        }\n        expression: NewExpression {\n          optional: undefined\n          typeArguments: undefined\n          loc: Object {\n            filename: 'unknown'\n            end: Object {\n              column: 35\n              index: 35\n              line: 1\n            }\n            start: Object {\n              column: 0\n              index: 0\n              line: 1\n            }\n          }\n          callee: ReferenceIdentifier {\n            name: 'Promise'\n            loc: Object {\n              filename: 'unknown'\n              end: Object {\n                column: 11\n                index: 11\n                line: 1\n              }\n              start: Object {\n                column: 4\n                index: 4\n                line: 1\n              }\n            }\n          }\n          arguments: Array [\n            ArrowFunctionExpression {\n              loc: Object {\n                filename: 'unknown'\n                end: Object {\n                  column: 30\n                  index: 30\n                  line: 1\n                }\n                start: Object {\n                  column: 16\n                  index: 16\n                  line: 1\n                }\n              }\n              body: BlockStatement {\n                body: Array []\n                directives: Array []\n                loc: Object {\n                  filename: 'unknown'\n                  end: Object {\n                    column: 30\n                    index: 30\n                    line: 1\n                  }\n                  start: Object {\n                    column: 28\n                    index: 28\n                    line: 1\n                  }\n                }\n              }\n              head: FunctionHead {\n                async: true\n                hasHoistedVars: false\n                params: Array []\n                rest: undefined\n                returnType: undefined\n                thisType: undefined\n                loc: Object {\n                  filename: 'unknown'\n                  end: Object {\n                    column: 28\n                    index: 28\n                    line: 1\n                  }\n                  start: Object {\n                    column: 16\n                    index: 16\n                    line: 1\n                  }\n                }\n              }\n            }\n          ]\n        }\n      }\n    ]\n  }\n}"
}