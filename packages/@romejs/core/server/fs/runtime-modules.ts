/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

export const modules: Map<string, Map<string, string>> = new Map();

// EVERYTHING BELOW IS AUTOGENERATED. SEE SCRIPTS FOLDER FOR UPDATE SCRIPTS

modules.set(
	"rome",
	new Map([
		[
			"index.ts",
			'/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nexport {TestHelper, test, testOptions} from "./test";\r\n',
		],
		[
			"package.json",
			'{\r\n  "name": "@romejs-runtime/rome",\r\n  "type": "module",\r\n  "private": true,\r\n  "main": "index.ts"\r\n}\r\n',
		],
		[
			"test.ts",
			'/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport {JSONPropertyValue} from "./types";\r\n\r\nexport type AsyncFunc = () => void | undefined | Promise<void>;\r\n\r\nexport type SyncThrower = () => void;\r\n\r\nexport type ExpectedError = undefined | string | RegExp | Function;\r\n\r\nexport type TestSnapshotOptions = {\r\n\tfilename?: string;\r\n\tlanguage?: string;\r\n};\r\n\r\n// These diagnostics are subsets of the official diagnostics\r\n// We can potentially normalize these and ensure backwards compatibility with the official diagnostics\r\n\r\nexport type TestDiagnosticLogCategory = "none" | "info" | "warn" | "error";\r\n\r\nexport type TestDiagnosticAdviceInspect = {\r\n\ttype: "inspect";\r\n\tdata: JSONPropertyValue;\r\n};\r\n\r\nexport type TestDiagnosticAdviceList = {\r\n\ttype: "list";\r\n\tlist: Array<string>;\r\n};\r\n\r\nexport type TestDiagnosticAdviceCode = {\r\n\ttype: "code";\r\n\tcode: string;\r\n};\r\n\r\nexport type TestDiagnosticAdviceLog = {\r\n\ttype: "log";\r\n\tcategory: TestDiagnosticLogCategory;\r\n\ttext: string;\r\n};\r\n\r\nexport type TestDiagnosticAdviceItem =\r\n\t| TestDiagnosticAdviceInspect\r\n\t| TestDiagnosticAdviceCode\r\n\t| TestDiagnosticAdviceLog\r\n\t| TestDiagnosticAdviceList;\r\n\r\nexport interface TestHelper {\r\n\taddToAdvice(item: TestDiagnosticAdviceItem): void;\r\n\tclearAdvice(): void;\r\n\tonTeardown(callback: AsyncFunc): void;\r\n\tclearTimeout(): void;\r\n\textendTimeout(time: number): void;\r\n\tsetTimeout(time: number): void;\r\n\tcheckTimeout(): void;\r\n\ttruthy(value: unknown, message?: string): void;\r\n\tfalsy(value: unknown, message?: string): void;\r\n\ttrue(value: unknown, message?: string): void;\r\n\tfalse(value: unknown, message?: string): void;\r\n\tis(received: unknown, expected: unknown, message?: string): void;\r\n\tnot(received: unknown, expected: unknown, message?: string): void;\r\n\tlooksLike(received: unknown, expected: unknown, message?: string): void;\r\n\tnotLooksLike(received: unknown, expected: unknown, message?: string): void;\r\n\tthrows(\r\n\t\tthrower: SyncThrower,\r\n\t\texpected?: ExpectedError,\r\n\t\tmessage?: string,\r\n\t): void;\r\n\tthrowsAsync(\r\n\t\tthrower: AsyncFunc,\r\n\t\texpected?: ExpectedError,\r\n\t\tmessage?: string,\r\n\t): Promise<void>;\r\n\tnotThrows(nonThrower: SyncThrower, message?: string): void;\r\n\tnotThrowsAsync(nonThrower: AsyncFunc, message?: string): Promise<void>;\r\n\tregex(contents: string, regex: RegExp, message?: string): void;\r\n\tnotRegex(contents: string, regex: RegExp, message?: string): void;\r\n\tsnapshot(\r\n\t\texpected: unknown,\r\n\t\tmessage?: string,\r\n\t\topts?: TestSnapshotOptions,\r\n\t): string;\r\n\tinlineSnapshot(received: unknown, expected?: string | boolean | number): void;\r\n\tnamedSnapshot(\r\n\t\tname: string,\r\n\t\texpected: unknown,\r\n\t\tmessage?: string,\r\n\t\topts?: TestSnapshotOptions,\r\n\t): string;\r\n}\r\n\r\nexport type TestName = string | Array<string>;\r\n\r\ndeclare const __ROME__TEST_OPTIONS__: GlobalTestOptions;\r\n\r\nexport type GlobalTestOptions =\r\n\t| undefined\r\n\t| {\r\n\t\t\tdirname?: string;\r\n\t\t\tregister?: (err: Error, opts: TestOptions, callback: TestCallback) => void;\r\n\t\t};\r\n\r\ntype NamelessTestOptions = {\r\n\ttimeout?: number;\r\n\tonly?: boolean;\r\n};\r\n\r\nexport type TestCallback = (t: TestHelper) => void | undefined | Promise<void>;\r\n\r\nexport type TestOptions = NamelessTestOptions & {\r\n\tname: TestName;\r\n};\r\n\r\ntype TestArg = TestName | NamelessTestOptions | TestCallback | undefined;\r\n\r\nexport const testOptions: NonNullable<GlobalTestOptions> =\r\n\t__ROME__TEST_OPTIONS__ === undefined ? {} : __ROME__TEST_OPTIONS__;\r\n\r\nfunction registerTest(\r\n\tcallsiteError: Error,\r\n\topts: TestOptions,\r\n\tcallback: TestCallback,\r\n) {\r\n\tconst register = testOptions.register;\r\n\r\n\tif (typeof register !== "function") {\r\n\t\tthrow new Error("Test harness does not exist");\r\n\t}\r\n\r\n\tregister(callsiteError, opts, callback);\r\n}\r\n\r\nfunction isOptionsObject(arg: TestArg): arg is NamelessTestOptions {\r\n\treturn typeof arg === "object" && arg != null && !Array.isArray(arg);\r\n}\r\n\r\nfunction splitArgs(\r\n\targs: TestRegisterFunctionArgs,\r\n): {\r\n\toptions: TestOptions;\r\n\tcallback: TestCallback;\r\n} {\r\n\tconst name = args.shift();\r\n\tif (typeof name !== "string" && !Array.isArray(name)) {\r\n\t\tthrow new Error("Expected test name to be a string or an array of strings");\r\n\t}\r\n\r\n\tconst callback = args.pop();\r\n\tif (typeof callback !== "function") {\r\n\t\tthrow new Error("Expected options callback");\r\n\t}\r\n\r\n\tconst options = args.pop();\r\n\tif (options !== undefined && !isOptionsObject(options)) {\r\n\t\tthrow new Error("Expected options object");\r\n\t}\r\n\r\n\tif (args.length > 0) {\r\n\t\tthrow new Error("Expected to have exhausted test register arguments");\r\n\t}\r\n\r\n\treturn {\r\n\t\toptions: {\r\n\t\t\t...options,\r\n\t\t\tname,\r\n\t\t},\r\n\t\tcallback,\r\n\t};\r\n}\r\n\r\ntype TestRegisterFunctionArgs =\r\n\t| [TestName, TestCallback]\r\n\t| [TestName, NamelessTestOptions, TestCallback];\r\n\r\ntype TestRegisterFunction = (...args: TestRegisterFunctionArgs) => void;\r\n\r\nexport const test: TestRegisterFunction & {\r\n\tonly: TestRegisterFunction;\r\n} = function(...args: TestRegisterFunctionArgs) {\r\n\tconst {options, callback} = splitArgs(args);\r\n\tregisterTest(new Error(), options, callback);\r\n};\r\n\r\ntest.only = function(...args: TestRegisterFunctionArgs) {\r\n\tconst {options, callback} = splitArgs(args);\r\n\tregisterTest(\r\n\t\tnew Error(),\r\n\t\t{\r\n\t\t\t...options,\r\n\t\t\tonly: true,\r\n\t\t},\r\n\t\tcallback,\r\n\t);\r\n};\r\n',
		],
		[
			"types.ts",
			"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n// These are copied from packages/@romejs/codec-json/types.ts\r\nexport type JSONValue =\r\n\t| null\r\n\t| string\r\n\t| number\r\n\t| boolean\r\n\t| JSONObject\r\n\t| JSONArray;\r\n\r\nexport type JSONPropertyValue = undefined | void | JSONValue;\r\n\r\nexport type JSONObject = {\r\n\t[x: string]: JSONPropertyValue;\r\n};\r\n\r\nexport type JSONArray = Array<JSONValue>;\r\n",
		],
	]),
);
